/**
 * try...catch语句用于标记要尝试的语句块，并指定一个出现异常时抛出的响应：
 * （1）try语句包含了由一个或者多个语句组成的try块, 和至少一个catch块或者一个
 * finally块的其中一个，或者两个兼有，
 * （2）catch子句包含try块中抛出异常时要执行的语句。也就是，你想让try语句中的内
 * 容成功， 如果没成功，你想控制接下来发生的事情，这时你可以在catch语句中实现。
 * （3） 如果在try块中有任何一个语句（或者从try块中调用的函数）抛出异常，控制立
 * 即转向catch子句。如果在try块中没有异常抛出，会跳过catch子句。
 * （4）finally子句在try块和catch块之后执行但是在下一个try声明之前执行。无论是否
 * 有异常抛出或捕获它总是执行。
 * （5）你可以嵌套一个或者更多的try语句。如果内部的try语句没有catch子句，那么将会
 * 进入包裹它的try语句的catch子句。
 * （6）当使用单个无条件catch子句时，抛出的任何异常时都会进入到catch块
 */
{
  // 语法
  try {
    // 需要执行的代码块
    // nonExistentFunction();
    throw '我是错误';
  }
  catch (e) {
    // 捕捉代码块出现的错误
    console.error(e);
  }
  finally {
    // 最后需要执行代码块
    console.error('我是最后执行的，不管怎么做我都会执行');
  }
}
